/**
 * Font Presets
 * @note if $text-preset-key is set on 'inherit' make sure the 'default' $text-preset is set on the '<body>' element
 *
 * @require $text-preset
 * @require $font-families with cap-height set
 * @require $space-unit-sizes
 *
 * @param $font-size-value (inherit | string)
 * @param $line-height (list)
 * @param $set-align-classes (true | false | reset)
 *
 */

$class-align-baseline: '.align-baseline' !default;
$class-align-capline: '.align-capline' !default;
$class-align-median: '.align-median' !default;
$class-align-reset: '.align-reset' !default;
$class-fit: '.fit' !default;

// Short vars
$short-variable: (
	font-size: 'fs',
	line-height: 'lh',
	capheight: 'chc',
	xheight: 'xhc',
);

/* Calculate font functions  */
@function live-calc-capheight-correction($font-cap-height){
	@return calc((1 - #{$font-cap-height}) / 2); // Split correction by 2 because only 50% of the alignments needs to be done
}


@function calc-capheight-correction($font-cap-height){
	@return ((1 - $font-cap-height )/ 2); // Split correction by 2 because only 50% of the alignments needs to be done
}

@function calc-xheight-correction($font-cap-height, $font-x-height){
	@return ((1 - $font-cap-height*$font-x-height )/ 2);
}

@function calc-center($line-height, $font-size) {
	@return ($line-height - $font-size) / 2; //$line-height-value Minus default height of font-size Split by 2. So 1.5 becomes .5 split by two become .25
}

@function calc-capheight($font-size, $line-height, $font-cap-height) {
	// Calculate baseline and capline
	$font-correction: $font-size * calc-capheight-correction($font-cap-height);
	$capheight-correction: calc-center($line-height, $font-size) + $font-correction;

	@return $capheight-correction;
}

@function live-calc-center($line-height, $font-size) {
	@return calc(((#{$line-height}*var(#{$su})) - #{$font-size}) / 2); //$line-height-value Minus default height of font-size Split by 2. So 1.5 becomes .5 split by two become .25
}

@function live-calc-capheight($font-size, $line-height,$text-preset-key) {
	// Calculate baseline and capline
	$font-correction: #{$font-size} * var(--f-+$text-preset-key+-chc);
	$capheight-correction: calc(#{live-calc-center($line-height, $font-size)} + calc(#{$font-correction}));

	@return $capheight-correction;
}

@function calc-xheight($font-size, $line-height, $font-cap-height, $font-x-height) {
	$font-correction: $font-size * calc-xheight-correction($font-cap-height, $font-x-height);
	$xheight-correction: calc-center($line-height, $font-size) + $font-correction;

	@return $xheight-correction;
}

@mixin space-text-preset-root($set-text-preset: default) {
	// Write back $set-text-preset to variable to keep original value
	$text-preset-key: $set-text-preset;

	@if ($set-text-preset == inherit) {
		$text-preset-key: default; // Set $set-text-preset-value to default to still set .align-baseline and .align-capline classes
	}

	// Get text-preset settings
	$text-preset: map-get($text-presets, $text-preset-key);

	// Get responsive text-preset variables
	$font-size-list: map-get($text-preset, font-size);
	$line-height-list: map-get($text-preset, line-height);

	/* Fonts */
	$font: default;
	// If font-family is added to preset overwrite default
	@if (map-has-key($text-preset, font)) {
		$font: map-get($text-preset, font);
	}

	/* Font size */
	$font-size: $font-size-list; // Set default value for font-size

	@if (is-list($font-size-list)) {
		$font-size: nth($font-size-list, 1);
	}

	/* Line height */
	$line-height: $line-height-list; 	// Set default value for line-height

	@if (is-list($line-height-list)) {
		$line-height: nth($line-height-list, 1);
	}

	// Set default value for font-list
	$font-list: map-get($fonts, default);

	@if (is-list($font) == false) {
		$font-list: map-get($fonts, $font);
	} @else {
		@warn ('different fonts for each breakpoint is not yet supported');
	}

	// Set font settings
	$font-family: map-get($font-list, family);
	$font-cap-height: map-get($font-list, cap-height);
	$font-x-height: map-get($font-list, x-height);

	// Print font-family
	$live-font-size: #{get-var($text-preset-key, font-size)};
	$live-line-height: #{get-var($text-preset-key, line-height)};
	$live-cap-height: #{get-var($text-preset-key, cap-height)};
	//#{set-var($text-preset-key, test)}: live-calc-capheight($live-font-size, $live-line-height, $text-preset-key);
	#{set-var($text-preset-key, capheight)}: live-calc-capheight($live-font-size, $live-line-height, $font);

	@each $viewport in $viewport-classes {
		$index: index($viewport-classes, $viewport);

		//@each $viewport, $set-text-preset-list in map-get($set-text-presets, $set-text-preset-value) {
		@include breakpoint($viewport) {
			// Set font-size for current breakpoint or fallback on font-size of previous breakpoint
			@if ($index <= length($font-size-list)) {
				$font-size: nth($font-size-list, $index);
			}
			// Set line-height for current breakpoint or fallback on line-height of previous breakpoint
			@if ($index <= length($line-height-list)) {
				$line-height: nth($line-height-list, $index);
			}

			// Check if $set-text-preset is a preset array
			// Get font-size
			$font-size-value: $font-size;

			// Calculate line-height
			$line-height-value: convert-space-units($line-height, $viewport);

			// Calculate baseline and capline
			$capheight-correction-value: calc-capheight($font-size-value, $line-height-value, $font-cap-height);

			// Calculate median
			$xheight-correction-value: calc-xheight($font-size-value, $line-height-value, $font-cap-height, $font-x-height);

			// Set font size
			#{set-var($text-preset-key, font-size)}: #{$font-size-value};

			// If line-height should be set
			@if ($line-height != false) {
				// Set line height
				#{set-var($text-preset-key, line-height)}: #{$line-height};
			}

			//// Set translate for baseline correction
			//@if ($capheight-correction-value != false) {
			//	// Add element to .align-baseline object
			//	#{set-var($text-preset-key, capheight)}: #{$capheight-correction-value};
			//}

			@if ($xheight-correction-value != false) {
				// Add element to .align-xline object
				#{set-var($text-preset-key, xheight)}: #{$xheight-correction-value};
			}
		}
	}
}

@mixin space-text-preset-values($set-text-preset: default, $line-height: default, $set-align-classes: true) {
	// Write back $set-text-preset to variable to keep original value
	$text-preset-key: $set-text-preset;

	@if ($set-text-preset == inherit) {
		$text-preset-key: default; // Set $set-text-preset-value to default to still set .align-baseline and .align-capline classes
	}

	// Get text-preset settings
	$text-preset: map-get($text-presets, $text-preset-key);

	// Check validity of $text-preset
	@if ($text-preset != null) {
		$font: default;

		// If font family is added to preset overwrite default
		@if (map-has-key($text-preset, font)) {
			$font: map-get($text-preset, font);
		}

		// Set default value for font-list
		$font-list: map-get($fonts, default);

		@if (is-list($font) == false) {
			$font-list: map-get($fonts, $font);
		} @else {
			@warn ('different fonts for each breakpoint is not yet supported');
		}

		// Get font-sizes
		$font-size-fallback-value: last(map-get($text-preset, font-size)); // Get highest value

		// Set font settings
		$font-family-value: map-get($font-list, family);

		$font-size-value: #{get-var($text-preset-key, font-size)};
		$line-height-value: #{get-var($text-preset-key, line-height)};

		// Overwrite font-size and line-height with inherit when it should be inherit
		@if ($set-text-preset == inherit) {
			$font-size-value: inherit;
			$line-height-value: inherit;
		}

		/**
		 * ASSIGN VALUES TO ATTRIBUTES
		 */

		// Print font-family
		@if ($font != default) {
			font-family: $font-family-value;
		}

		// Print font size
		@if space-legacy() {
			font-size: $font-size-fallback-value;
		}

		font-size: $font-size-value;

		// Print line height
		@if ($line-height != false) {
			line-height: calc(#{$line-height-value} * var(#{$su}));
		}

		// Set typography alignment classes
		@if ($set-align-classes == true) {
			// Add element to .align-baseline object
			@if (space-support(align-baseline)) {
				#{$class-align-baseline} & {
					// Set short variable
					--s: translateY(#{get-var($text-preset-key, capheight)});

					transform: var(--s);
				}
			}

			// Add element to .align-capline object
			@if (space-support(align-capline)) {
				#{$class-align-capline} & {
					// Set short variable
					--s: translateY(calc(#{get-var($text-preset-key, capheight)} * -1));

					transform: var(--s);
				}
			}

			@if (space-support(align-median)) {
				#{$class-align-median} & {
					// Set short variable
					--s: translateY(calc(#{get-var($text-preset-key, xheight)} * -1));

					transform: var(--s);
				}
			}

			@if (space-support(fit-baseline)) {
				#{$class-align-baseline} #{$class-fit} > &:first-child,
				#{$class-align-baseline}#{$class-fit} > &:first-child {
					margin-top: calc(#{get-var($text-preset-key, capheight)} * -2);
				}
			}

			@if (space-support(fit-capline)) {
				#{$class-align-capline} #{$class-fit} > &:last-child,
				#{$class-align-capline}#{$class-fit} > &:last-child {
					margin-bottom: calc(#{get-var($text-preset-key, capheight)} * -2);
				}
			}

			@if (space-support(align-reset)) {
				#{$class-align-reset} & {
					transform: none;
				}
			}
		}
	} @else {
		@warn ('`' +$text-preset-key + '` is not present in your $text-presets');
	}
}

/*
 * Font preset mixin
 *
 * @example
 * @include text-preset(large) => font-size: 24rem; line-height: 3.2rem;
 *
 * @param $set-text-preset (array-key | inherit) string of array-key of $set-text-presets
 * @param $set-align-classes (true | false)
 */
@mixin text-preset($set-text-preset: default, $set-align-classes: true) {
	@include space-text-preset-values($set-text-preset, true, $set-align-classes);
}

/*
 * Self align mixin
 * @description aligns items based on default font-size to align-baseline, align-capline, align-median
 * without actually setting font-sizes, line-height or font-families
 */
@mixin self-align() {
	@include text-preset(inherit);
}

/*
 * Font-size function
 */
@mixin font-size($font-size-value: default) {
	@include space-text-preset-values($font-size-value, false, false);
}


/**
 * Set font variables
 * NEW
 */
@mixin font-variables() {
	@each $key, $font in $fonts {
		$font-family: map-get($font, 'family');
		$x-height: map-get($font, 'x-height');
		$cap-height: map-get($font, 'cap-height');
		$cap-height-correction: live-calc-capheight-correction(var(#{'--f-'+$key+'-ch'}));
		$x-height-correction: calc-xheight-correction($cap-height, $x-height);
		:root {
			#{'--f-'+$key+'-f'}: $font-family;
			#{'--f-'+$key+'-ch'}: $cap-height;
			#{'--f-'+$key+'-xh'}: $x-height;
			#{'--f-'+$key+'-chc'}: $cap-height-correction;
			#{'--f-'+$key+'-xhc'}: $x-height-correction;
		}
	}
}

/*
 * text-preset root variables
 *
 * @description this mixins creates root variables. Working from Edge 15+
 */
@mixin text-preset-variables() {
	@include font-variables();

	:root {
		@each $size, $value in $text-presets {
			@include space-text-preset-root($size);
		}
	}
}


/*
 * Font-size-classes mixin
 *
 * @description this mixin adds classes for all the different font-sizes
 *
 * @example: font-size-small | font-size-default
 */

@mixin font-size-classes() {
	@each $size, $value in $text-presets {
		.font-size-#{$size} {
			@include font-size($size);
		}
	}
}

/*
 * text-preset-classes mixin
 *
 * @description this mixin adds classes for all the different text-presets
 * @example: text-preset-large | text-preset-xlarge
 */
@mixin text-preset-classes() {
	@each $size, $value in $text-presets {
		.text-preset-#{$size} {
			@include text-preset($size);
		}
	}
}

/*
 * Legacy
 */
@mixin font-preset-variables() {
	@warn '`font-preset-variables` is a deprecated function since 1.0.0.alpha-5 use `text-preset-variables` instead';
	@warn 'Also note that `$font-presets` are replace with `$text-presets`';

	@include text-preset-variables();
}

@mixin font-preset-root() {
	@warn '`font-preset-root` is a deprecated function since 0.16 use `text-preset-variables` instead';

	@include text-preset-variables();
}

@mixin font-preset($set-text-preset: default, $set-align-classes: true) {
	@warn '`@include font-preset()` is a deprecated mixin since 1.0.0.alpha-5  use `@include text-preset()` instead';

	@include text-preset($set-text-preset, $set-align-classes);
}

@mixin font-preset-classes() {
	@warn '`@include font-preset-classes()` is a deprecated mixin since 1.0.0.alpha-5  use `@include text-preset-classes()` instead';

	@include text-preset-classes();
}